node('maven') {
            stage ("Get Source code"){
                  echo '*** Build starting ***'
                  def mvn = "mvn -s mvn-settings.xml"
                  git url : 'https://github.com/demo-redhat-forum-2018/monolith.git'
                  
                  //write Nexus configfile
                  
     writeFile file: 'mvn-settings.xml', text: """
<?xml version="1.0"?>
<settings>
  <mirrors>
    <mirror>
      <id>Nexus</id>
      <name>Nexus Public Mirror</name>
      <url>${params.NEXUS_MIRROR_URL}</url>
      <mirrorOf>*</mirrorOf>
    </mirror>
  </mirrors>
  <servers>
    <server>
      <id>nexus</id>
      <username>${params.NEXUS_USER}</username>
      <password>${params.NEXUS_PASSWORD}</password>
    </server>
  </servers>
</settings>
"""
       
        }
          def pom            = readMavenPom file: 'pom.xml'
          def packageName    = pom.name
          def version        = pom.version
          def newVersion     = "${version}-${BUILD_NUMBER}"
          def artifactId     = pom.artifactId
          def groupId        = pom.groupId

          // Using Mav build the war file
          stage('Build war file') {
            sh "mvn -s mvn-settings.xml clean install -DskipTests=true"
          }         
          
           stage('Publish to Nexus') {

            sh "echo ${params.NEXUS_USER}"
             sh "echo ${params.NEXUS_PASSWORD}"
             sh "cat pom.xml"
            sh "mvn -s mvn-settings.xml deploy -DskipTests=true -e  -DaltDeploymentRepository=nexus::default::${params.NEXUS_REPO_URL} "
          }


           stage('Build OpenShift Image') {
    // Determine the war filename that we need to use later in the process
    String warFileName = "${groupId}.${artifactId}"
    warFileName = warFileName.replace('.', '/')
    def WAR_FILE_URL = "${params.NEXUS_REPO_URL}/${warFileName}/${version}/${artifactId}-${version}.war"
    echo "Will use WAR at ${WAR_FILE_URL}"

    // Trigger an OpenShift build in the build environment
    openshiftBuild bldCfg: params.OPENSHIFT_BUILD_CONFIG, checkForTriggeredDeployments: 'false',
                   namespace: params.OPENSHIFT_BUILD_PROJECT, showBuildLogs: 'true',
                   verbose: 'false', waitTime: '', waitUnit: 'sec',
                   env: [ [ name: 'WAR_FILE_URL', value: "${WAR_FILE_URL}" ] ]


    // Tag the new build
    
    openshiftTag alias: 'false', destStream: params.OPENSHIFT_IMAGE_STREAM, destTag: "${newVersion}",
                 destinationNamespace: params.OPENSHIFT_BUILD_PROJECT, namespace: params.OPENSHIFT_BUILD_PROJECT,
                 srcStream: params.OPENSHIFT_IMAGE_STREAM, srcTag: 'latest', verbose: 'false'
  }

             }